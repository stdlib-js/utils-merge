// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pinf@v0.2.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-object@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-keys@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-buffer@v0.2.0-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.2.0-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-type-of@v0.2.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@v0.1.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import{isPrimitive as v}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.2.0-esm/index.mjs";import{isPrimitive as a}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@v0.1.0-esm/index.mjs";function j(){return{level:t,override:!0,extend:!0,copy:!0}}function c(e,t,s,p,v,a){var j,u,f,b,h,g,x,y,w;for(u=d(v),s-=1,b=i(t),w=0;w<b.length;w++)if(g=b[w],(j=n(e,g))||a)if(x=t[g],j){if(h=e[g],f=l(h),!o(h)&&"object"===f&&r(x)&&s){c(h,x,s,p,v,a);continue}u?(y=v(h,x,g),p&&y!==h&&y===x&&(y=m(y)),e[g]=y):v&&(e[g]=p?m(x):x)}else e[g]=p?m(x):x}function u(e){return function(t){var i,n,o,d;if((i=arguments.length-1)<1)throw new Error("insufficient arguments. Must provide both a target object and one or more source objects.");if(!r(t))throw new TypeError(s("invalid argument. First argument must be an object. Value: `%s`.",t));for(o=new Array(i),d=0;d<i;d++){if(!r(n=arguments[d+1]))throw new TypeError(s("invalid argument. All arguments must be objects. Index: `%u`. Value: `%s`.",d,n));o[d]=n}for(d=0;d<i;d++)c(t,o[d],e.level,e.copy,e.override,e.extend);return t}}var f=u(j());function b(e){var t,r;if(r=function(e,t){return p(t)?n(t,"level")&&(e.level=t.level,!a(e.level))?new TypeError(s("invalid option. `%s` option must be a positive integer. Option: `%s`.","level",e.level)):n(t,"copy")&&(e.copy=t.copy,!v(e.copy))?new TypeError(s("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",e.copy)):!n(t,"override")||(e.override=t.override,v(e.override)||d(e.override))?n(t,"extend")&&(e.extend=t.extend,!v(e.extend))?new TypeError(s("invalid option. `%s` option must be a boolean. Option: `%s`.","extend",e.extend)):null:new TypeError(s("invalid option. `%s` option must be either a boolean or a function. Option: `%s`.","override",e.override)):new TypeError(s("invalid argument. Options argument must be an object. Value: `%s`.",t))}(t=j(),e),r)throw r;return u(t)}e(f,"factory",b);export{f as default,b as factory};
//# sourceMappingURL=index.mjs.map
