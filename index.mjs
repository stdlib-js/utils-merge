// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pinf@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-object@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-keys@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-buffer@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-type-of@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@esm/index.mjs";var j={level:t,override:!0,extend:!0,copy:!0},c=i,f=r,u=n,b=o,h=d,g=m,y=l;var x=function e(t,r,s,i,n,o){var d,m,l,p,a,v,j,x,w;for(m=h(n),s-=1,p=c(r),w=0;w<p.length;w++)if(v=p[w],(d=u(t,v))||o)if(j=r[v],d){if(a=t[v],l=g(a),!b(a)&&"object"===l&&f(j)&&s){e(a,j,s,i,n,o);continue}m?(x=n(a,j,v),i&&x!==a&&x===j&&(x=y(x)),t[v]=x):n&&(t[v]=i?y(j):j)}else t[v]=i?y(j):j},w=r,E=s,T=x;var O=function(e){return function(t){var r,s,i,n;if((r=arguments.length-1)<1)throw new Error("insufficient input arguments. Must provide both a target object and one or more source objects.");if(!w(t))throw new TypeError(E("invalid argument. First argument must be an object. Value: `%s`.",t));for(i=new Array(r),n=0;n<r;n++){if(!w(s=arguments[n+1]))throw new TypeError(E("invalid argument. A merge source must be an object. Value: `%s`.",s));i[n]=s}for(n=0;n<r;n++)T(t,i[n],e.level,e.copy,e.override,e.extend);return t}},V=O(j),A=p,P=n,k=a.isPrimitive,F=d,M=v.isPrimitive,q=s;var z=l,B=function(e,t){return A(t)?P(t,"level")&&(e.level=t.level,!M(e.level))?new TypeError(q("invalid option. `%s` option must be a positive integer. Option: `%s`.","level",e.level)):P(t,"copy")&&(e.copy=t.copy,!k(e.copy))?new TypeError(q("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",e.copy)):!P(t,"override")||(e.override=t.override,k(e.override)||F(e.override))?P(t,"extend")&&(e.extend=t.extend,!k(e.extend))?new TypeError(q("invalid option. `%s` option must be a boolean. Option: `%s`.","extend",e.extend)):null:new TypeError(q("invalid option. `%s` option must be either a boolean or a function. Option: `%s`.","override",e.override)):new TypeError(q("invalid argument. Options argument must be an object. Value: `%s`.",t))},C=j,D=O;var G=V,H=function(e){var t,r;if(t=z(C),r=B(t,e))throw r;return D(t)};e(G,"factory",H);var I=G;export{I as default,H as factory};
//# sourceMappingURL=index.mjs.map
